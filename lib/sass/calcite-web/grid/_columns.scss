// ┌───────────┐
// │ Container │
// └───────────┘
//  ↳ http://esri.github.io/calcite-web/grid/#container
//  ↳ grid → _container.md

@mixin grid-container() {
  @include clearfix();

  margin-left: auto;
  margin-right: auto;
  max-width: $max-width;
  padding-left: 0;
  padding-right: 0;
  width: $container-width;

  @include box-sizing(border-box);
}

// ┌─────────┐
// │ Columns │
// └─────────┘
//  ↳ http://esri.github.io/calcite-web/grid/#columns
//  ↳ grid → _columns.md

@mixin column() {
  @include box-sizing(border-box);

  max-width: 100%;
  padding-left: $column-gutter / 2;
  padding-right: $column-gutter / 2;
  width: $container-width;

  @include left();

  [class*="column-"]:first-of-type {
    margin-left: -$column-gutter / 2;

    @if ($include-right-to-left) {
      html[dir="rtl"] & {
        margin-left: 0;
        margin-right: -$column-gutter / 2;
      }
    }
  }

  [class*="column-"]:last-of-type {
    margin-right: -$column-gutter / 2;

    @if ($include-right-to-left) {
      html[dir="rtl"] & {
        margin-left: -$column-gutter / 2;
        margin-right: 0;
      }
    }
  }

  &:last-of-type {
    @include clearfix();
  }
}

// ┌────────────────┐
// │ First and Last │
// └────────────────┘
//  ↳ http://esri.github.io/calcite-web/grid/#first-and-last
//  ↳ grid → _first-and-last.md

@mixin first-column() {
  margin-left: -($column-gutter/2);

  @if ($include-right-to-left) {
    html[dir="rtl"] & {
      margin-left: 0;
      margin-right: -$column-gutter / 2;
    }
  }
}

@mixin last-column() {
  margin-right: -($column-gutter / 2);

  @if ($include-right-to-left) {
    html[dir="rtl"] & {
      margin-left: -$column-gutter / 2;
      margin-right: 0;
    }
  }
}

// ┌────────────────────┐
// │ Responsive Columns │
// └────────────────────┘
//  ↳ http://esri.github.io/calcite-web/grid/#responsive-columns
//  ↳ grid → _responsive-columns.md

@mixin responsive-column() {

  @if $fold-grid == true {
    // Extra Large Columns
    @media screen and (min-width: $large) {
      @for $n from 1 through $large-column-count {
        .#{$prefix}column-#{$n} {
          max-width: ($n / $large-column-count) * $max-width;
          width: ($n / $large-column-count) * $container-width;

          > .#{$prefix}column-#{$n} {
            margin-left: -($column-gutter / 2);
            margin-right: -$column-gutter / 2;
          }
        }
      }

      @for $n from 1 through $large-column-count {
        .#{$prefix}#{$large-class}-column-#{$n} {
          max-width: ($n / $large-column-count) * $max-width;
          width: ($n / $large-column-count) * $container-width;
        }
      }

      .#{$prefix}#{$large-class}-first-column {
        margin-left: -($column-gutter / 2);
        margin-right: -$column-gutter / 2;
      }

      .#{$prefix}#{$large-class}-last-column {
        margin-left: -$column-gutter / 2;
        margin-right: -($column-gutter / 2);
      }
    }

    // Large Columns
    @media screen and (max-width: $large - 1) {
      @for $n from 1 through $default-column-count {
        .#{$prefix}column-#{$n} {
          max-width: ($n / $default-column-count) * $max-width;
          width: ($n / $default-column-count) * $container-width;

          > .#{$prefix}column-#{$n} {
            margin-left: -($column-gutter/2);
            margin-right: -$column-gutter / 2;
          }
        }
      }
    }

    // Medium Columns
    @media screen and (max-width: $medium - 1) {
      @for $n from 1 through $medium-column-count {
        .#{$prefix}column-#{$n} {
          max-width: ($n / $medium-column-count) * $max-width;
          width: ($n / $medium-column-count) * $container-width;
        }
      }

      @for $n from $medium-column-count through $default-column-count {
        .#{$prefix}column-#{$n} {
          max-width: (1) * $max-width;
          width: (1) * $container-width;
        }
      }
      @for $n from 1 through $medium-column-count {
        .#{$prefix}#{$medium-class}-column-#{$n} {
          max-width: ($n / $medium-column-count) * $max-width;
          width: ($n / $medium-column-count) * $container-width;
        }
      }

      .#{$prefix}#{$medium-class}-first-column {
        margin-left: -($column-gutter / 2);
        @if ($include-right-to-left) {
          html[dir="rtl"] & {
            margin-left: 0;
            margin-right: -$column-gutter / 2;
          }
        }
      }

      .#{$prefix}#{$medium-class}-last-column {
        margin-right: -($column-gutter / 2);
        @if ($include-right-to-left) {
          html[dir="rtl"] & {
            margin-left: -$column-gutter / 2;
            margin-right: 0;
          }
        }
      }
    }

    // Small Columns
    @media screen and (max-width: $small - 1) {
      @for $n from 1 through $small-column-count {
        .#{$prefix}column-#{$n} {
          max-width: ($n / $small-column-count) * $max-width;
          width: ($n / $small-column-count) * $container-width;
        }
      }

      @for $n from $small-column-count through $default-column-count {
        .#{$prefix}column-#{$n} {
          max-width: (1) * $max-width;
          width: (1) * $container-width;
        }
      }

      @for $n from 1 through $small-column-count {
        .#{$prefix}#{$medium-class}-column-#{$n} {
          max-width: ($n / $small-column-count) * $max-width;
          width: ($n / $small-column-count) * $container-width;
        }
      }

      @for $n from $small-column-count through $default-column-count {
        .#{$prefix}#{$medium-class}-column-#{$n} {
          max-width: (1) * $max-width;
          width: (1) * $container-width;
        }
      }

      @for $n from 1 through $small-column-count {
        .#{$prefix}#{$small-class}-column-#{$n} {
          max-width: ($n / $small-column-count) * $max-width;
          width: ($n / $small-column-count) * $container-width;
        }
      }

      .#{$prefix}#{$small-class}-first-column {
        margin-left: -($column-gutter / 2);

        @if ($include-right-to-left) {
          html[dir="rtl"] & {
            margin-left: 0;
            margin-right: -$column-gutter / 2;
          }
        }
      }

      .#{$prefix}#{$small-class}-last-column {
        margin-right: -($column-gutter / 2);

        @if ($include-right-to-left) {
          html[dir="rtl"] & {
            margin-left: -$column-gutter / 2;
            margin-right: 0;
          }
        }
      }
    }
  }

  @else {
    @for $n from 1 through $default-column-count {
      .#{$prefix}column-#{$n} {
        max-width: ($n / $default-column-count) * $max-width;
        width: ($n / $default-column-count) * $container-width;

        > .#{$prefix}column-#{$n} {
          margin-left: -($column-gutter/2);
          margin-right: -$column-gutter / 2;
        }
      }
    }
  }
}

@if $include-grid == true {
  [class*="column-"] {
    @include column();
  }

  @media screen {
    .#{$prefix}grid-container {
      @include grid-container();
    }
  }

  @media screen and (min-width: $large) {
    @if unit($container-width) == "vw" {
      .#{$prefix}grid-container {
        $diff: $large-column-count - $default-column-count;
        $side: $diff / 2;
        $margin: $side / $large-column-count * $container-width;
        padding-left: $margin;
        padding-right: $margin;
      }

      .#{$prefix}grid-full {
        padding-left: 0;
        padding-right: 0;
      }
    }
  }

  @media screen {
    .#{$prefix}first-column {
      @include first-column();
    }

    .#{$prefix}last-column {
      @include last-column();
    }
  }

  @include responsive-column();
}
