// ┌─────────┐
// │ Drawers │
// └─────────┘
//  ↳ http://esri.github.io/calcite-web/patterns/#drawers
//  ↳ patterns → _drawers.md

$transform-transition: transform 200ms cubic-bezier(.215, .44, .42, .88);
$opacity-transition: opacity 200ms linear;

@mixin drawer() {
  background: $transparent-black;
  bottom: 0;
  left: 0;
  opacity: 0;
  overflow: hidden;
  position: fixed;
  right: 0;
  top: 0;
  visibility: hidden;
  z-index: 1001;

  @include transition(visibility 0ms linear 200ms, $opacity-transition);

  &.is-active {
    background-color: $transparent-black;
    opacity: 1;
    visibility: visible;

    @include transition-delay(0ms);

    &.drawer-left .drawer-nav {
      @include transform(translate3d($drawer-width, 0, 0));

      @if ($include-right-to-left) {
        html[dir="rtl"] & {
          @include transform(translate3d(-$drawer-width, 0, 0));
        }
      }
    }

    &.drawer-right .drawer-nav {
      @include transform(translate3d(-$drawer-width, 0, 0));

      @if ($include-right-to-left) {
        html[dir="rtl"] & {
          @include transform(translate3d($drawer-width, 0, 0));
        }
      }
    }
  }
}

@mixin drawer-nav() {
  background: $white;
  height: 100%;
  list-style: none;
  margin: 0;
  -webkit-overflow-scrolling: touch;
  overflow-x: hidden;
  overflow-y: auto;
  padding: 0;
  position: absolute;
  top: 0;
  width: $drawer-width;

  @include transform(translate3d(0, 0, 0));
  @include transition-prefixed($transform-transition);
}

@mixin drawer-left-is-active() {
  @include transition-prefixed($transform-transition);
  @include transform(translate3d($drawer-width,0,0));
}

@mixin drawer-right-is-active() {
  @include transition-prefixed($transform-transition);
  @include transform(translate3d(-$drawer-width,0,0));
}

@if $include-drawers == true {
  .drawer {
    @include drawer();
  }

  .drawer-nav {
    @include drawer-nav();
  }

  .drawer-left .drawer-nav {
    left: -$drawer-width;

    @if ($include-right-to-left) {
      html[dir="rtl"] & {
        left: 100%;
      }
    }
  }

  .drawer-right .drawer-nav {
    left: 100%;

    @if ($include-right-to-left) {
      html[dir="rtl"] & {
        left: -$drawer-width;
      }
    }
  }

  .wrapper {
    @include transition-prefixed($transform-transition);
  }

  .drawer-left-is-active {
    @include drawer-left-is-active();

    @if ($include-right-to-left) {
      html[dir="rtl"] & {
        @include drawer-right-is-active();
      }
    }
  }

  .drawer-right-is-active {
    @include drawer-right-is-active();

    @if ($include-right-to-left) {
      html[dir="rtl"] & {
        @include drawer-left-is-active();
      }
    }
  }

  .ie9 {
    .drawer {
      &.is-active {
        &.drawer-left .drawer-nav {
          -ms-transform: translate($drawer-width, 0);

          @if ($include-right-to-left) {
            html[dir="rtl"] & {
              -ms-transform: translate(-$drawer-width, 0);
            }
          }
        }

        &.drawer-right .drawer-nav {
          -ms-transform: translate(-$drawer-width, 0);

          @if ($include-right-to-left) {
            html[dir="rtl"] & {
              -ms-transform: translate($drawer-width, 0);
            }
          }
        }
      }
    }
  }
}
